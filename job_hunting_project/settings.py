"""
Django settings for job_hunting_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dotenv
from django.utils.translation import gettext_lazy as _
dotenv.load_dotenv()
print("ENV VAR:", os.environ.get('USE_SIMULATION_ENV'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'a_default_secret_key_if_not_set')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# AI Simulation Setting
# Defaults to True (simulated) if env var is not set or not 'False'
# Set USE_AI_SIMULATION_ENV=False in your .env or environment to use the real API
# USE_AI_SIMULATION = os.environ.get('USE_AI_SIMULATION_ENV', 'True').lower() != 'false'
USE_AI_SIMULATION_ENV_VAR = os.getenv('USE_SIMULATION_ENV', 'True')  # Default to 'True' (string) if not set
USE_AI_SIMULATION = USE_AI_SIMULATION_ENV_VAR.lower() != 'false'
print(f"[SETTINGS.PY] USE_AI_SIMULATION_ENV_VAR: '{USE_AI_SIMULATION_ENV_VAR}'")
print(f"[SETTINGS.PY] USE_AI_SIMULATION set to: {USE_AI_SIMULATION}")
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "matcher",
    "corsheaders",
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
]

ROOT_URLCONF = "job_hunting_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "job_hunting_project.context_processors.supabase_config",
            ],
        },
    },
]

WSGI_APPLICATION = "job_hunting_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

LANGUAGES = [
    ('en', _('English')),
    ('de', _('German')),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale/',
]

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Added for project-level static files directory
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Supabase Configuration
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')
SUPABASE_SERVICE_ROLE_KEY = os.getenv('SUPABASE_SERVICE_ROLE_KEY')

# Google OAuth Configuration for Supabase
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')

# It's good practice to check if these are set, especially in production
if not SUPABASE_URL or not SUPABASE_KEY:
    # In a development environment, you might want to print a warning
    # or raise an ImproperlyConfigured error if these are critical.
    print("WARNING: SUPABASE_URL and/or SUPABASE_KEY are not set in environment variables.")
    # For local development, you can fall back to default values if you wish,
    # but be careful not to commit sensitive keys to version control.
    # Example fallback (NOT RECOMMENDED FOR PRODUCTION KEYS):
    # SUPABASE_URL = "your_local_or_dev_supabase_url"
    # SUPABASE_KEY = "your_local_or_dev_supabase_anon_key"

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5678", # For N8N chat
]

# N8N Integration
N8N_CHAT_URL = "http://localhost:5678/webhook/bddbcab4-7cb3-4b64-ab9c-70321bbbda7d/chat"

# Application definition

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    "job_hunting_project.auth_backend.SupabaseUserBackend", # 新的认证后端
    # "job_hunting_project.supabase_auth_backend.SupabaseAuthBackend", # 将被新的认证后端取代
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

SITE_ID = 1
LOGIN_REDIRECT_URL = '/'

SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"